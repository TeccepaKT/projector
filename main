# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Артём\Documents\QtUi\Проектировщик.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import json

from PyQt5 import QtCore, QtGui, QtWidgets


class Window(QtWidgets.QMainWindow):
	""" приложение """

	def __init__(self, parent=None):
		super().__init__(parent)
		self.context = 'MainWindow'

		# иконки
		self.icon_dir_new = QtGui.QIcon(QtGui.QPixmap('icons/dir_new.png'))
		self.icon_dir_edit = QtGui.QIcon(QtGui.QPixmap('icons/dir_edit.png'))
		self.icon_files = QtGui.QIcon(QtGui.QPixmap('icons/files.png'))

		# расширения
		with open('extensions.json') as f:
			self.extensions: dict[str, str] = json.load(f)
		self.path, self.dir = '\\'.join((_splitted := os.getcwd().split('\\'))[:-1]), _splitted[-1]
		self.le_name_color = (-1, -1, -1)

		self.setupUi()


	def setupUi(self):
		""" интерфейс """
		self.setObjectName(self.context)
		self.resize(320, 220)

		# centralWidget
		self.centralWidget = QtWidgets.QWidget(self)
		self.centralWidget.setObjectName('centralWidget')

		self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
		self.verticalLayout.setObjectName('verticalLayout')

		# title
		self.l_title = QtWidgets.QLabel(self.centralWidget)
		self.l_title.setObjectName('l_title')
		self.verticalLayout.addWidget(self.l_title)

		self.line = QtWidgets.QFrame(self.centralWidget)
		self.line.setFrameShape(QtWidgets.QFrame.HLine)
		self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
		self.line.setObjectName('line')
		self.verticalLayout.addWidget(self.line)


		# grid
		self.gridLayout = QtWidgets.QGridLayout()
		self.gridLayout.setObjectName('gridLayout')

		# labels
		self.l_name  = QtWidgets.QLabel(self.centralWidget)
		self.l_files = QtWidgets.QLabel(self.centralWidget)
		self.l_lang  = QtWidgets.QLabel(self.centralWidget)
		self.l_hat   = QtWidgets.QLabel(self.centralWidget)

		self.l_name .setObjectName('l_name')
		self.l_files.setObjectName('l_files')
		self.l_lang .setObjectName('l_lang')
		self.l_hat  .setObjectName('l_hat')
		
		self.gridLayout.addWidget(self.l_name,  0, 0, 1, 1)
		self.gridLayout.addWidget(self.l_files, 1, 0, 1, 1)
		self.gridLayout.addWidget(self.l_lang,  2, 0, 1, 1)
		self.gridLayout.addWidget(self.l_hat,   3, 0, 1, 1)

		# input
		self.le_name  = QtWidgets.QLineEdit(self.centralWidget)
		self.le_files = QtWidgets.QLineEdit(self.centralWidget)
		self.cb_lang  = QtWidgets.QComboBox(self.centralWidget)
		self.cb_hat   = QtWidgets.QCheckBox(self.centralWidget)

		self.le_name .setObjectName('le_name')
		self.le_files.setObjectName('le_files')
		self.cb_lang .setObjectName('cb_lang')
		self.cb_hat  .setObjectName('cb_hat')

		self.le_name .setValidator(QtGui.QRegExpValidator(QtCore.QRegExp(r'[^\\/:*?"<>| ]*')))
		self.le_files.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp(r'(?:[^\\/:*?"<>| ]+ ?)*')))

		self.cb_lang.addItems(self.extensions)
		self.cb_hat.setChecked(True)

		self.gridLayout.addWidget(self.le_name,  0, 1, 1, 1)
		self.gridLayout.addWidget(self.le_files, 1, 1, 1, 1)
		self.gridLayout.addWidget(self.cb_lang,  2, 1, 1, 1)
		self.gridLayout.addWidget(self.cb_hat,   3, 1, 1, 1)
		self.verticalLayout.addLayout(self.gridLayout)


		# done button
		spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
		self.verticalLayout.addItem(spacerItem)
		
		self.pb_done = QtWidgets.QPushButton(self.centralWidget)
		self.pb_done.setObjectName('pb_done')
		
		self.verticalLayout.addWidget(self.pb_done)


		# end
		self.setCentralWidget(self.centralWidget)

		self.statusBar = QtWidgets.QStatusBar(self) # вывод статуса программы
		self.statusBar.setObjectName('statusBar')
		self.setStatusBar(self.statusBar)

		self.retranslateUi()
		QtCore.QMetaObject.connectSlotsByName(self)


	@QtCore.pyqtSlot(str)
	def on_le_name_textChanged(self, dir_):
		if dir_ == self.dir:
			color = (255, 35, 35)
		elif os.path.isdir(self.path + '\\' + dir_):
			color = (109, 109, 109)
		else:
			color = (35, 120, 35)

		if color != self.le_name_color:
			self.le_name.setStyleSheet('QLineEdit{ color: rgb(' + ', '.join(map(str, color)) + '); }')
			self.le_name_color = color


	@QtCore.pyqtSlot()
	def on_pb_done_clicked(self):
		""" нажатие кнопки """

		# получение введённых значений
		direction: str = self.le_name.text().lower()
		files: set[str] = set(self.le_files.text().lower().split())
		ext: str = self.extensions[self.cb_lang.currentText()]

		# исключения
		if not direction:
			self.statusBar.showMessage('Не указано имя папки', 2000)
			return
		if not files:
			self.statusBar.showMessage('Не указаны имена файлов', 2000)
			return

		# получение шапки программы
		hat: str = ''
		if self.cb_hat.isChecked():
			with open(f'hats\\hat.{ext}', 'r') as f:
				hat: str = f.read()

		# создание папки
		path = self.path + f'\\{direction}'
		make_dir: bool = False
		if not os.path.isdir(path):
			os.mkdir(path)
			make_dir: bool = True

		# создание файлов
		for filename in files:
			full_filename: str = f'{filename}.{ext}'
			file_path: str = f'{path}\\{full_filename}'

			with open(file_path, 'w') as f:

				# специальная шапка файла
				h: str = hat
				for rep, to in (('$$PATH$$', file_path), ('$$DIRPATH$$', path), ('$$FILENAME$$', filename), ('$$FULLFILENAME$$', full_filename)):
					h = h.replace(rep, to)

				f.write(h)

		files_count: int = len(files)
		_ce: bool = files_count % 10
		msg: str = f'Создан' + ('ы папка и' if make_dir else 'о'*(_ce != 1 or files_count == 11)) + \
			f' {files_count} файл' + ('ов' if 11 <= files_count <= 14 else '' if _ce == 1 else 'а' if 1 < _ce <= 4 else 'ов') + \
			f' (.{ext})'
		self.statusBar.showMessage(msg, 2000)


	def retranslateUi(self):
		""" перевод интерфейса """
		_translate = QtCore.QCoreApplication.translate

		self.setWindowTitle(_translate(self.context, 'Проектировщик'))
		
		self.l_title.setText(_translate(self.context, 'Создайте или дополните существующую папку.\nДобавьте файлы в неё.'))
		
		self.l_name .setText(_translate(self.context, 'Название папки:'))
		self.l_files.setText(_translate(self.context, 'Названия файлов:'))
		self.l_lang .setText(_translate(self.context, 'Язык:'))
		self.l_hat  .setText(_translate(self.context, 'Шапка:'))
		self.cb_hat .setText(_translate(self.context, 'Добавлять в начало файла'))
		
		self.le_name .setToolTip(_translate(self.context, 'Впишите название папки.\nЕсли её не существует, она будет создана.\nНапример: «round 123»'))
		self.le_files.setToolTip(_translate(self.context, 'Через пробел впишите названия файлов, например «a b c d e»'))
		self.cb_lang .setToolTip(_translate(self.context, 'Выберите язык программирования'))
		self.cb_hat  .setToolTip(_translate(self.context, 'Добавлять в начало каждого файла начальный код для выбранного языка.\nНапример, для C++ будут добавлены «#include <iostream>», «int main()»'))
		
		self.pb_done.setText(_translate(self.context, 'Готово'))
		self.pb_done.setToolTip(_translate(self.context, 'Создать файлы в папке.\nЕсли такие файлы уже существуют в этой папке, они будут перезаписаны!'))


def main():
	# вход в приложение
	app = QtWidgets.QApplication(sys.argv)
	window = Window() # окно
	window.show()
	sys.exit(app.exec_()) # работа приложения


if __name__ == '__main__':
	main()
